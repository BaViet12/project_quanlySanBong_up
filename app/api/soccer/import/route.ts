import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import * as XLSX from "xlsx";

const prisma = new PrismaClient();

export async function POST(req: NextRequest) {
  try {
    const formData = await req.formData();
    const file = formData.get("file") as File;
    const fileType = formData.get("fileType") as string;
    if (!file) {
      return NextResponse.json(
        { error: "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c t·∫£i l√™n!" },
        { status: 400 }
      );
    }
    const buffer = await file.arrayBuffer();
    const data = new Uint8Array(buffer);
    let records: any[] = [];
    if (fileType === "excel") {
      const workbook = XLSX.read(data, { type: "array" });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      records = XLSX.utils.sheet_to_json(worksheet);
    } else if (fileType === "csv") {
      return NextResponse.json(
        { error: "ƒê·ªãnh d·∫°ng CSV ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£!" },
        { status: 400 }
      );
    }

    const transformedRecords = await Promise.all(
      records.map(async (record) => ({
        name: record["T√™n s√¢n"] || "Kh√¥ng c√≥ t√™n",
        field_type: Number(record["Lo·∫°i s√¢n"]) || 0,
        status: record["Tr·∫°ng th√°i"] || "HOATDONG",
        HinhAnh: record["H√¨nh ·∫£nh"] || "",
        MoTa: record["M√¥ t·∫£"] || "",
        update_at: new Date(),
      }))
    );

    // Ch√®n d·ªØ li·ªáu v√†o database b·∫±ng Prisma
    const result = await prisma.fields.createMany({
      data: transformedRecords,
      skipDuplicates: true,
    });

    return NextResponse.json({
      success: true,
      count: result.count,
      data: transformedRecords,
    });
  } catch (error: any) {
    console.error("üî• L·ªói nh·∫≠p file Excel:", error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
